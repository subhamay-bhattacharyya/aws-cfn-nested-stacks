AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  CFN Nested Template to create a Security Group Rule Ingress for a VPC

Metadata:
  TemplateName: sg-rule-ingress.yaml
  TemplateType: Security Group Rule Ingress
  Description: >-
    This CloudFormation template defines a security group rule for ingress traffic within a specified VPC.
  Version: 1.0.0
  Owner: Subhamay Bhattacharyya
  ProjectName: Nested Stack Templates Collection
  Modification History:
    - 1.0.0  Jan 08, 2025  --  Initial Version
  StepsToTest: Manually verify the Stack.
  StepsToCleanup: Stack delete command

  Parameters:
    RuleType: The type of rule. Must be 'ingress' or 'egress'.
    CidrType: The type of CIDR block. Must be 'ipv4' or 'ipv6'.
    SecurityGroupId: The ID of the security group.
    IPProtocol: The protocol. For example, TCP.
    FromPort: The starting port for the range.
    ToPort: The ending port for the range.
    CidrIp: The IPv4 CIDR block.
    CidrIpv6: The IPv6 CIDR block.
    SourceSecurityGroupId: The ID of the source security group.
    RuleDescription: The description for the security group rule.

    Resources:
      SecurityGroup: An AWS EC2 Security Group with properties for GroupName, GroupDescription, VpcId, and Tags.

    Outputs:
      SecurityGroupId: The ID of the created EC2 Security Group.
      SecurityGroupVpcId: The VPC ID of the created EC2 Security Group.

  AWS::CloudFormation::Interface:
    ParameterGroups:
      ################################## Security Group ############################################
      - Label:
          default: "Security Group:"
        Parameters:
          - RuleType
          - CidrType
          - SecurityGroupId
          - IPProtocol
          - FromPort
          - ToPort
          - CidrIp
          - CidrIpv6
          - SourceSecurityGroupId
          - RuleDescription
    ParameterLabels:
      ################################## Security Group Rule #######################################
      RuleType:
        default: "Rule Type."
      CidrType:
        default: "CIDR Block Type."
      SecurityGroupId:
        default: "ID of the security group."
      IPProtocol:
        default: "Protocol for the rule."
      FromPort:
        default: "Starting port for the rule."
      ToPort:
        default: "Ending port for the rule."
      CidrIp:
        default: "IPv4 CIDR block."
      CidrIpv6:
        default: "IPv6 CIDR block."
      SourceSecurityGroupId:
        default: "ID of the source security group."
      RuleDescription:
        default: "Description of the security group rule."

Parameters:
  ###################################### Security Group ############################################
  RuleType:
    Default: "ingress"
    Description: "The type of rule. Must be 'ingress' or 'egress'."
    Type: String
    AllowedValues:
    - "ingress"
    - "egress"
    ConstraintDescription: "The type of rule. Must be 'ingress' or 'egress'."

  CidrType:
    Default: "ipv4"
    Description: "The type of CIDR block. Must be 'ipv4' or 'ipv6'."
    Type: String
    AllowedValues:
    - "ipv4"
    - "ipv6"
    ConstraintDescription: "The type of CIDR block. Must be 'ipv4' or 'ipv6'."

  SecurityGroupId:
    Default: "sg-0123456789abcdef0"
    Description: "Security Group ID."
    Type: String
    AllowedPattern: "^sg-[a-fA-F0-9]{8,17}$"
    ConstraintDescription: "The Security Group ID must be a valid ID starting with 'sg-' followed by 8 to 17 hexadecimal characters."

  IPProtocol:
    Default: "icmp"
    Type: String
    AllowedValues:
    - "icmp"
    - "tcp"
    - "ssh"

  FromPort:
    Default: "-1"
    Type: Number

  ToPort:
    Default: "-1"
    Type: Number

  CidrIp:
    Default: "10.0.0.0/0"
    Description: "VPC CIDR Block."
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "The VPC CIDR Block must be in the form x.x.x.x/x."

  CidrIpv6:
    Default: "::/0"
    Description: "IPv6 CIDR Block."
    Type: String
    AllowedPattern: "^$|^::/0$|^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}/[0-9]{1,3}$"
    ConstraintDescription: "The IPv6 CIDR Block must be in the form xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/x or ::/0."

  SourceSecurityGroupId:
    Default: ""
    Description: "Source Security Group ID."
    Type: String
    AllowedPattern: "^$|^sg-[a-fA-F0-9]{8,17}$"
    ConstraintDescription: "The Security Group ID must be a valid ID starting with 'sg-' followed by 8 to 17 hexadecimal characters."

  RuleDescription:
    Default: "Open up ports for ICMP"
    Type: String


######################################## Conditions ################################################
Conditions:
  EnableIngressIPV4Cidr: !And [!Equals [!Ref RuleType, "ingress"], !Equals [!Ref CidrType, "ipv4"]]
  EnableIngressIPV6Cidr: !And [!Equals [!Ref RuleType, "ingress"], !Equals [!Ref CidrType, "ipv6"]]
  EnableEgressIPV4Cidr: !And [!Equals [!Ref RuleType, "egress"], !Equals [!Ref CidrType, "ipv4"]]
  EnableEgressIPV6Cidr: !And [!Equals [!Ref RuleType, "egress"], !Equals [!Ref CidrType, "ipv6"]]
  SourceSecurityGroup: !Not
    - !Equals
      - !Ref SourceSecurityGroupId
      - ""

  NotSourceSecurityGroup:  !Equals
      - !Ref SourceSecurityGroupId
      - ""
Resources:
  ######################################  Security Group Ingress Rule ##############################
  SecurityGroupRuleIngressIPV4:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: EnableIngressIPV4Cidr
    Properties:
      GroupId: !Ref SecurityGroupId
      IpProtocol: !Ref IPProtocol
      FromPort: !Ref FromPort
      ToPort: !Ref ToPort
      CidrIp:  !If [ NotSourceSecurityGroup, !Ref CidrIp, !Ref 'AWS::NoValue' ]
      SourceSecurityGroupId: !If [ SourceSecurityGroup, !Ref SourceSecurityGroupId, !Ref 'AWS::NoValue' ]
      Description: !Ref RuleDescription
  SecurityGroupRuleIngressIPV6:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: EnableIngressIPV6Cidr
    Properties:
      GroupId: !Ref SecurityGroupId
      IpProtocol: !Ref IPProtocol
      FromPort: !Ref FromPort
      ToPort: !Ref ToPort
      CidrIpv6: !If [ NotSourceSecurityGroup, !Ref CidrIpv6, !Ref 'AWS::NoValue' ]
      SourceSecurityGroupId:  !If [ SourceSecurityGroup, !Ref SourceSecurityGroupId, !Ref 'AWS::NoValue' ]
      Description: !Ref RuleDescription
  SecurityGroupRuleEgressIPV4:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: EnableEgressIPV4Cidr
    Properties:
      GroupId: !Ref SecurityGroupId
      IpProtocol: !Ref IPProtocol
      FromPort: !Ref FromPort
      ToPort: !Ref ToPort
      CidrIp:  !If [ NotSourceSecurityGroup, !Ref CidrIp, !Ref 'AWS::NoValue' ]
      Description: !Ref RuleDescription
  SecurityGroupRuleEgressIPV6:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: EnableEgressIPV6Cidr
    Properties:
      GroupId: !Ref SecurityGroupId
      IpProtocol: !Ref IPProtocol
      FromPort: !Ref FromPort
      ToPort: !Ref ToPort
      CidrIpv6: !If [ NotSourceSecurityGroup, !Ref CidrIpv6, !Ref 'AWS::NoValue' ]
      Description: !Ref RuleDescription
Outputs:
  ###################################### Security Group Rule (Ingress) #############################
  SecurityGroupIngressRuleIdIPV4:
    Condition: EnableIngressIPV4Cidr
    Description: Security Group Rule ID
    Value: !Ref SecurityGroupRuleIngressIPV4
  SecurityGroupIngressRuleIdIPV6:
    Condition: EnableIngressIPV6Cidr
    Description: Security Group Rule ID
    Value: !Ref SecurityGroupRuleIngressIPV6
  ###################################### Security Group Rule (Egress) #############################
  SecurityGroupEgressRuleIdIPV4:
    Condition: EnableIngressIPV4Cidr
    Description: Security Group Rule ID
    Value: !Ref SecurityGroupRuleIngressIPV4
  SecurityGroupEgressRuleIdIPV6:
    Condition: EnableIngressIPV6Cidr
    Description: Security Group Rule ID
    Value: !Ref SecurityGroupRuleIngressIPV6